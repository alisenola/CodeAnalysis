#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#===================================================================================================
# This script takes in the aggregated diff output from the diffs flow
# And generates a new csv file detailing the shortened extent of change
# Between files to be fed into the visualization HTML
#===================================================================================================

#Created mshakir@keystonestrategy.com
#Modified ssia@keystonestrategy.com
#Last Modified 08/16/2016

from __future__ import print_function
from collections import defaultdict
import csv
from utilScripts.util import read_csv
import os

CLOC_START_FLAGS = 14

#Recursively adds connections to a dictionary until its all connected.
def addRecursive(dirDir, key):
	if (key == "" or key in dirDir):
		return
	value = "/".join((key.split("/")[:-1]))
	dirDir[key] = value
	addRecursive(dirDir, value)

def isRelevantVersion(fromID, toID, version1, version2):
	if (version1 == "0"):
		if version2 == fromID:
			return True
		if version2 == toID:
			return True
	elif (version1 == fromID and version2 == toID):
		return True
	return False

#Given a file to draw information from,
#Given a file to put your input into,
#Gather information
#File is the Xversion_Yversion_report.csv generated by cloc
#ToDO in future; Add in the parameters for stuff.
def createVizCSV( outputfile, inputfile, comparison ):
	out_lines = []
	dirDir = {}
	fromVersion = comparison["fromID"]
	toVersion = comparison["toID"]


	with open( outputfile, "w", newline='') as csvfile:
		headers = [ "fromVersion", "toVersion", "source", "target", "type", "origSize", "newSize", "adds", "removes" ]
		out = csv.writer( csvfile, delimiter=";", quotechar='"', quoting=csv.QUOTE_MINIMAL )
		out.writerow( headers )

		for row in read_csv( inputfile, header_rows=1, delimiter=";" ):
			if len(row) == 1: continue
			filename, \
			blankSame, blankModded, blankAdded, blankRemoved, \
			commSame, commModded, commAdded, commRemoved, \
			codeSame, codeModded, codeAdded, codeRemoved, __UNUSED__ = row[0:CLOC_START_FLAGS]

			adds = codeAdded
			removes = codeRemoved
			unchanged = codeSame #Only same + removed because counting percentage of new change from orginal
			newSize = int(codeSame) + int(codeModded) + int(codeAdded) #Denominator = new code
			origSize = int(codeSame) + int(codeModded) + int(codeRemoved)

			#Replace origin strings with nothing so we just get what we want.
			#TODO Should be input file + folder. Must edit
			filename = filename.replace(comparison["fromFolder"],"")
			filename = filename.replace(comparison["toFolder"],"")

			branch = "/".join((filename.split("/")[:-1]))

			addRecursive(dirDir, branch)
			out.writerow( [fromVersion, toVersion, branch, filename, "file", origSize, 
				newSize, codeAdded, codeRemoved] )

			for key in dirDir:
				out.writerow( [fromVersion, toVersion, dirDir[key], key, "Directory", "","","",""] )

if __name__ == '__main__':
	print("Do not call this file in isolation")
